#include <GLFW/glfw3.h>

void drawBoundingBox(int x, int y, int width, int height) {
    // Set up the projection matrix to use pixel coordinates
    glMatrixMode(GL_PROJECTION);
    glPushMatrix();
    glLoadIdentity();
    glOrtho(0, 1440, 900, 0, -1, 1); // Replace with your window size
    
    // Set up the modelview matrix to draw in 2D
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glLoadIdentity();
    
    // Draw the bounding box
    glColor3f(1.0f, 0.0f, 0.0f); // Red color
    glBegin(GL_LINE_LOOP);
    glVertex2i(x, y);
    glVertex2i(x + width, y);
    glVertex2i(x + width, y + height);
    glVertex2i(x, y + height);
    glEnd();
    
    // Restore the projection and modelview matrices
    glPopMatrix();
    glMatrixMode(GL_PROJECTION);
    glPopMatrix();
    glMatrixMode(GL_MODELVIEW);
}



// Function to handle keyboard events
void keyCallback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
    if (action == GLFW_PRESS) {
        switch(key) {
            case GLFW_KEY_SPACE: {
                // Draw a square at a specific position on the screen
                int xStart = 100;
                int yStart = 100;
                int xEnd = 200;
                int yEnd = 200;

                // Make the OpenGL context of the window current
                glfwMakeContextCurrent(window);

                // Draw your scene here
                drawBoundingBox(xStart, yStart, xEnd, yEnd);

                // Swap front and back buffers
                glfwSwapBuffers(window);
                    }
            break;
            case GLFW_KEY_D: {
                int xStart = 150;
                int yStart = 150;
                int xEnd = 300;
                int yEnd = 300;

                // Make the OpenGL context of the window current
                glfwMakeContextCurrent(window);

                // Draw your scene here
                drawBoundingBox(xStart, yStart, xEnd, yEnd);

                // Swap front and back buffers
                glfwSwapBuffers(window);
            }
            break;
        }
        
    }
}

int main()
{
    // Initialize GLFW
    if (!glfwInit())
        return -1;

    glfwWindowHint(GLFW_TRANSPARENT_FRAMEBUFFER, GLFW_TRUE);
    glfwWindowHint(GLFW_DECORATED, GLFW_FALSE);
    // Retrieve the primary monitor
    GLFWmonitor* primaryMonitor = glfwGetPrimaryMonitor();



    // Create a GLFW window
    // GLFWwindow* window = glfwCreateWindow(2560, 1440, "Keyboard Events", NULL, NULL);
    const GLFWvidmode* videoMode = glfwGetVideoMode(primaryMonitor);

    GLFWwindow* window = glfwCreateWindow(videoMode->width, videoMode->height, "Fullscreen Window", primaryMonitor, NULL);

    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    // Set the keyboard callback function
    glfwSetKeyCallback(window, keyCallback);

    // Make the OpenGL context of the window current
    glfwMakeContextCurrent(window);

    // Loop until the user closes the window
    while (!glfwWindowShouldClose(window))
    {
        // Poll for and process events
        // drawBoundingBox(150, 150, 300, 300);
        glfwPollEvents();
    }

    // Terminate GLFW
    glfwTerminate();

    return 0;
}


